@model DagoWebPortfolio.Models.PicturesViewModel
@using DagoWebPortfolio.Classes
@{
    ViewBag.Title = "Edit";
}
<div class="container">
    <h2>Edit</h2>


    @using (Html.BeginForm("Edit", "Pictures", FormMethod.Post,
                                                                        new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>PicturesViewModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)


            @*<input type="hidden" name="origineFileName" value="@Html.DisplayFor(model => model.FileName)" />*@


            <div class="form-group">
                @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsAbout, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.IsAbout, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsAbout, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsWelcome, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.IsWelcome, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsWelcome, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-md-1">
                    File
                </div>
                <div class="col-md-4">
                    <input id="ImagePath" title="Upload a project image" type="file" name="file" />
                    @Html.ValidationMessage("FileName", "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4">
                    @if (Model != null && Model.FileName != null)
                    {                      
                        if (Model.FileName.Split('.').Count() > 1 && Model.FileName.Split('.')[1] == "mp4")
                        {
                            string fileFullPath = Utility.getDirectory(Model.path, Model.FileName);
                            <p>Mp4 preview.</p>                            
                            <video id="ourvideo" style="height:200px;width:100%;" autoplay loop preload="auto" controls = "controls" >
                                <source src = "@Html.DisplayFor(model=>model.path)@Html.DisplayFor(model=>model.FileName)" type='video/mp4' />
                            </video >
                            <div id="footnote"></div> 
                        }
                        else if (File.Exists(Utility.getDirectory(Model.path, Model.FileName)))
                        {
                            <p>Image preview.</p>                            
                            <img style="height:200px;width:100%;" src="@Html.DisplayFor(model=>model.path)@Html.DisplayFor(model=>model.FileName)" />
                        }
                    }
                    else
                    {
                        <p>No preview avalable.</p>
                    }  
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-md-2">
                    Video (*.webm)
                </div>
                <div class="col-md-10">
                    @if (Model != null && Model.path != null && Model.path.Split('.').Count() > 1 && Model.path.Split('.')[1] == "mp4")
                    {
                        <input id="video" title="Is the file a video?" type="checkbox" name="isVideo" value="true" checked />
                    }
                    else
                    {
                        <input id="video_" title="Is the file a video?" type="checkbox" name="isVideo" value="true" />
                    }
                    <input title="Is the file a video?" type="hidden" name="isVideo" value="false" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.path, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.DisplayFor(model => model.path, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.path, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.DisplayFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.link, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.link, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.link, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>*@

            <div class="form-group">
                <div class="col-md-1">
                    Linked to None
                </div>
                <div class="col-md-9">

                    @if (Model.ProjectDetailsViewModelID.Equals(null) && Model.ExperiencesViewModelID.Equals(null) && Model.EducationViewModelID.Equals(null) && Model.SkillsViewModelID.Equals(null))
                    {
                        <input type="radio" name="link_picture_to" value="none" checked />
                    }
                    else
                    {
                        <input type="radio" name="link_picture_to" value="none" />
                    }
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProjectDetailsViewModelID, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @if (!Model.ProjectDetailsViewModelID.Equals(null))
                {
                        <input type="radio" name="link_picture_to" value="project" checked />
                    }
                    else
                    {
                        <input type="radio" name="link_picture_to" value="project" />
                    }
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-9 col-md-offset-1">
                    @Html.DropDownList("ProjectDetailsViewModelID", null, "Select Project", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProjectDetailsViewModelID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EducationViewModelID, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @if (!Model.EducationViewModelID.Equals(null))
                {
                        <input type="radio" name="link_picture_to" value="education" checked>
                    }
                    else
                    {
                        <input type="radio" name="link_picture_to" value="education" />
                    }
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-9 col-md-offset-1">
                    @Html.DropDownList("EducationViewModelID", null, "Select Education", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EducationViewModelID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ExperiencesViewModelID, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @if (!Model.ExperiencesViewModelID.Equals(null))
                {
                        <input type="radio" name="link_picture_to" value="experience" checked>
                    }
                    else
                    {
                        <input type="radio" name="link_picture_to" value="experience" />
                    }
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-9 col-md-offset-1">
                    @Html.DropDownList("ExperiencesViewModelID", null, "Select Experience", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ExperiencesViewModelID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SkillsViewModelID, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-9">
                    @if (!Model.SkillsViewModelID.Equals(null))
                {
                        <input type="radio" name="link_picture_to" value="skill" checked>
                    }
                    else
                    {
                        <input type="radio" name="link_picture_to" value="skill" />
                    }
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-9 col-md-offset-1">
                    @Html.DropDownList("SkillsViewModelID", null, "Select Skills", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SkillsViewModelID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-1 col-md-9">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@*<script src="http://popcornjs.org/code/dist/popcorn-complete.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var popcorn = Popcorn("#ourvideo");
        popcorn.footnote({
            start: 2,
            end: 5,
            target: "footnote",
            text: "Popoooooooooooooooooooo!"
        });
    }, false);
</script>*@